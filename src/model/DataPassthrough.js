/**
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MethodEnum from './MethodEnum';

/**
 * The DataPassthrough model module.
 * @module model/DataPassthrough
 * @version 1.0
 */
class DataPassthrough {
    /**
     * Constructs a new <code>DataPassthrough</code>.
     * # The DataPassthrough Object ### Description The &#x60;DataPassthrough&#x60; object is used to send information to an otherwise-unsupported third-party endpoint.  ### Usage Example Create a &#x60;DataPassthrough&#x60; to get team hierarchies from your Rippling integration.
     * @alias module:model/DataPassthrough
     * @param method {module:model/MethodEnum} 
     * @param path {String} 
     */
    constructor(method, path) { 
        
        DataPassthrough.initialize(this, method, path);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, method, path) { 
        obj['method'] = method;
        obj['path'] = path;
    }

    /**
     * Constructs a <code>DataPassthrough</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataPassthrough} obj Optional instance to populate.
     * @return {module:model/DataPassthrough} The populated <code>DataPassthrough</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataPassthrough();

            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], MethodEnum);
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], {'String': Object});
            }
            if (data.hasOwnProperty('headers')) {
                obj['headers'] = ApiClient.convertToType(data['headers'], {'String': Object});
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/MethodEnum} method
 */
DataPassthrough.prototype['method'] = undefined;

/**
 * @member {String} path
 */
DataPassthrough.prototype['path'] = undefined;

/**
 * @member {Object.<String, Object>} data
 */
DataPassthrough.prototype['data'] = undefined;

/**
 * @member {Object.<String, Object>} headers
 */
DataPassthrough.prototype['headers'] = undefined;






export default DataPassthrough;

