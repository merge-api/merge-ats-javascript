/**
 * Merge ATS API
 * The unified API for building rich integrations with multiple Applicant Tracking System platforms.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: hello@merge.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AccountIntegration from './AccountIntegration';
import ModelOperation from './ModelOperation';

/**
 * The AvailableActions model module.
 * @module model/AvailableActions
 * @version 1.0
 */
class AvailableActions {
    /**
     * Constructs a new <code>AvailableActions</code>.
     * # The AvailableActions Object ### Description The &#x60;Activity&#x60; object is used to see all available model/operation combinations for an integration.  ### Usage Example Fetch all the actions available for the &#x60;Zenefits&#x60; integration.
     * @alias module:model/AvailableActions
     * @param integration {module:model/AccountIntegration} 
     * @param passthroughAvailable {Boolean} 
     */
    constructor(integration, passthroughAvailable) { 
        
        AvailableActions.initialize(this, integration, passthroughAvailable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, integration, passthroughAvailable) { 
        obj['integration'] = integration;
        obj['passthrough_available'] = passthroughAvailable;
    }

    /**
     * Constructs a <code>AvailableActions</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableActions} obj Optional instance to populate.
     * @return {module:model/AvailableActions} The populated <code>AvailableActions</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableActions();

            if (data.hasOwnProperty('integration')) {
                obj['integration'] = AccountIntegration.constructFromObject(data['integration']);
            }
            if (data.hasOwnProperty('passthrough_available')) {
                obj['passthrough_available'] = ApiClient.convertToType(data['passthrough_available'], 'Boolean');
            }
            if (data.hasOwnProperty('available_model_operations')) {
                obj['available_model_operations'] = ApiClient.convertToType(data['available_model_operations'], [ModelOperation]);
            }
        }
        return obj;
    }


}

/**
 * @member {module:model/AccountIntegration} integration
 */
AvailableActions.prototype['integration'] = undefined;

/**
 * @member {Boolean} passthrough_available
 */
AvailableActions.prototype['passthrough_available'] = undefined;

/**
 * @member {Array.<module:model/ModelOperation>} available_model_operations
 */
AvailableActions.prototype['available_model_operations'] = undefined;






export default AvailableActions;

